name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute IMAGE_NAME
        shell: bash
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install release tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate OpenAPI schema
        run: |
          scripts/generate_openapi.py --output dist/openapi.json

      - name: Build debug bundle
        run: |
          scripts/build_dist_tarball.sh

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Build and push multi-arch image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Capture digest
        run: |
          echo "IMAGE_DIGEST=${{ steps.build.outputs.digest }}" >> "$GITHUB_ENV"
          echo "IMAGE_DIGEST=${{ steps.build.outputs.digest }}" >> dist/image-digest.txt

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: dist/sbom.spdx.json
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image with Cosign
        env:
          COSIGN_EXPERIMENTAL: '1'
        run: |
          cosign sign --yes ${{ env.IMAGE_NAME }}@${{ env.IMAGE_DIGEST }}

      - name: Generate provenance predicate
        run: |
          python scripts/generate_provenance.py \
            --image ${{ env.IMAGE_NAME }} \
            --digest ${{ env.IMAGE_DIGEST }} \
            --version ${{ steps.version.outputs.version }} \
            --output dist/provenance.json

      - name: Generate provenance attestation
        env:
          COSIGN_EXPERIMENTAL: '1'
        run: |
          cosign attest --yes \
            --predicate dist/provenance.json \
            --type slsaprovenance \
            --outfile dist/provenance.intoto.jsonl \
            ${{ env.IMAGE_NAME }}@${{ env.IMAGE_DIGEST }}

      - name: Render release notes
        run: |
          python scripts/render_release_notes.py \
            --version ${{ steps.version.outputs.version }} \
            --image-digest ${{ env.IMAGE_DIGEST }} \
            --owner ${{ github.repository_owner }} \
            --output dist/release-notes.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          body_path: dist/release-notes.md
          files: |
            dist/openapi.json
            dist/sbom.spdx.json
            dist/provenance.intoto.jsonl
            dist/dist.tar.gz
            example.env
            compose.service.yaml
            dist/image-digest.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
